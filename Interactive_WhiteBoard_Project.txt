import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.awt.event.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;


public class PaintApp extends JFrame
{
	
		JButton brushBut, lineBut, ellipseBut, rectBut, strokeBut, fillBut;
		JButton eraser,Crop,Image;

		
		JTextField BrushW,LineW;
		JTextField BrushH,LineH;
		JLabel Width,LineWidth;
		JLabel Height,LineHeight;
		JButton OK;
		int startx, starty;
		int stopx, stopy;
		int currentx, currenty;
		
		
		// Slider used to change the transparency
		
		JSlider transSlider;
		
		JLabel transLabel;
		
		// Makes sure the float for transparency only shows 2 digits
		
		DecimalFormat dec = new DecimalFormat("#.##");
		
		// Contains all of the rules for drawing 
		
		Graphics2D graphSettings;
		
		
		// To change the stroke dynamically with a component
		
		// Going to be used to monitor what shape to draw next
		
		int currentAction = 1;
		
		// Transparency of the shape
		
		float transparentVal = 1.0f;
		
		// Default stroke and fill colors
		
		Color strokeColor=Color.BLACK, fillColor=Color.BLACK;
		Color EraseColor=Color.WHITE;
	
        public PaintApp() throws IOException
        {
        	// Define the defaults for the JFrame
        	
            this.setSize(1200, 1000);
            this.setTitle("Java Paint");
            this.setBackground(Color.WHITE);
            this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            
            BrushW=new JTextField(10);
            BrushH=new JTextField(10);
            
            LineW=new JTextField(10);
            LineH=new JTextField(10);
            
            Width=new JLabel("BRUSH WIDTH");
            Height=new JLabel("BRUSH HEIGHT");
            
            LineWidth=new JLabel("LINE WIDTH");
            LineHeight=new JLabel("LINE HEIGHT");
            
            
            OK=new JButton("OK");
            OK.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {
				 Object W=BrushW.getText();
				String pars= W.toString();
				 int w=Integer.parseInt(pars);
				 
				 Object H=BrushH.getText();
					String parsH= H.toString();
					 int g=Integer.parseInt(parsH);
					 
					 System.out.println(w+"+"+g);
					
				}
            	
            });
            //create the menu bar
            JMenuBar menubar=new JMenuBar();
            
            JMenu file= new JMenu("File");
            file.setMnemonic(KeyEvent.VK_F);
            menubar.add(file);
            JMenuItem open=new JMenuItem("Open");
            JMenuItem New=new JMenuItem("New");
            JMenuItem save=new JMenuItem("Save");
            JMenuItem exit=new JMenuItem("Exit");
            exit.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {
					System.exit(0);
					
				}
            });
            file.add(open);
            file.add(New);
            file.add(save);
            file.add(exit);
            
            
            	
         
            JMenu help=new JMenu("Help");
            menubar.add(help);
            JMenuItem about=new JMenuItem("About");
            help.add(about);

            setJMenuBar(menubar);
            JPanel buttonPanel = new JPanel();
            
            // Swing box that will hold all the buttons
            
            Box theBox = Box.createHorizontalBox();
            JPanel boxP=new JPanel();
            Box theBox2=Box.createVerticalBox();
            
            theBox2.add(Width);
            theBox2.add(BrushW);
            theBox2.add(Height);
            theBox2.add(BrushH);
            theBox2.add(LineWidth);
            theBox2.add(LineW);
            theBox2.add(LineHeight);
            theBox2.add(LineH);
            boxP.add(theBox2);
            theBox2.add(OK);
            
            // Make all the buttons in makeMeButtons by passing the
            // button icon. 
            
            brushBut = makeMeButtons("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\brush.png", 1);
            lineBut = makeMeButtons("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\Line.png", 2);
            ellipseBut = makeMeButtons("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\Ellipse.png", 3);
            rectBut = makeMeButtons("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\Rectangle.png", 4);
            eraser=makeMeButtons("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\eraser.png", 5);
            Crop=makeMeButtons("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\crop.png", 6);
            Image=makeMeButtons("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\image.png",7);
            // Make all the buttons in makeMeColorButton by passing the
            // button icon and true for stroke color or false for fill
            
            strokeBut = makeMeColorButton("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\stroke.png", 8, true);
            fillBut = makeMeColorButton("C:\\Users\\alex_\\eclipse-workspace\\FinalProject\\src\\color.png", 9, false);
            
            
            
            
            
            // Add the buttons to the box
            
            theBox.add(brushBut);
            theBox.add(lineBut);
            theBox.add(ellipseBut);
            theBox.add(rectBut);
            theBox.add(eraser);
            theBox.add(Crop);
            theBox.add(Image);
            theBox.add(strokeBut);
            theBox.add(fillBut);

            
            
           
            
            // Add the transparent label and slider
            
            transLabel = new JLabel("Transparent: 1");
            
            // Min value, Max value and starting value for slider
            
            transSlider = new JSlider(1, 99, 99);
            
            // Create an instance of ListenForEvents to handle events
            
            ListenForSlider lForSlider = new ListenForSlider();
            
           //adding a change listener so that java know when to change the transparancy.
            transSlider.addChangeListener(lForSlider);

            theBox.add(transLabel);
            theBox.add(transSlider);
            
            // Add the box of buttons to the panel
            
            buttonPanel.add(theBox);

            // Position the buttons in the bottom of the frame
            
            this.add(buttonPanel, BorderLayout.SOUTH);
            this.add(boxP, BorderLayout.WEST);
            // Make the drawing area take up the rest of the frame
          
            this.add(new DrawingBoard(), BorderLayout.CENTER);
            
            
            // Show the frame
            
            this.setVisible(true);
            
        }
        
        // actionNum==currentAction, the shape to be drawn
        
        public JButton makeMeButtons(String iconFile, final int actionNum){
        	JButton theBut = new JButton();
            Icon butIcon = new ImageIcon(iconFile);
            theBut.setIcon(butIcon);
            
            // Make the proper actionPerformed method execute when the
            // specific button is pressed
            
            theBut.addActionListener(new ActionListener() {

				public void actionPerformed(ActionEvent e) {
					currentAction = actionNum;
					
				}
            });
            
            return theBut;  
        }
        
        // whether a stroke or fill is to be defined
        
        public JButton makeMeColorButton(String iconFile, final int actionNum, final boolean stroke){
        	JButton theBut = new JButton();
            Icon butIcon = new ImageIcon(iconFile);
            theBut.setIcon(butIcon);
            
            theBut.addActionListener(new ActionListener() {

				public void actionPerformed(ActionEvent e) {
					
					if(stroke){
						
						// JColorChooser pops up 
						
						strokeColor = JColorChooser.showDialog(null,  "Pick a Stroke", Color.BLACK);
					} else {
						fillColor = JColorChooser.showDialog(null,  "Pick a Fill", Color.BLACK);
					}
					
				}
            });
            
            return theBut;  
        }
        
       
        //class drawing board where the shapes are defined to be drawn
        private class DrawingBoard extends JComponent
        {
        	
        	
        	
        		//arraylist which store all shapes to be drawn
                ArrayList<Shape> shapes = new ArrayList<Shape>();
            	//arraylist which store all filledColors to be drawn
                ArrayList<Color> shapeFill = new ArrayList<Color>();
               	//arraylist which store all strokeColors to be drawn
                ArrayList<Color> shapeStroke = new ArrayList<Color>();
               	//arraylist which store all transparancy
                ArrayList<Float> transPercent = new ArrayList<Float>();
               	//arraylist which store all images
                ArrayList<BufferedImage> images=new ArrayList<BufferedImage>();
                
                private BufferedImage image;
                Point drawStart, drawEnd;
                Point drawPoint;

                // Monitors events on the drawing area of the frame
                
                public DrawingBoard() throws IOException

                {
                	
                	 this.setBackground(Color.WHITE);
                	image=ImageIO.read(getClass().getResource("/brush.png"));
                        this.addMouseListener(new MouseAdapter()
                          {
                        	
                            public void mousePressed(MouseEvent e)
                            {
                            	
                            	if(currentAction != 1&&currentAction !=5){
                            	
                            	// When the mouse is pressed get x & y position
                            	
                            	drawStart = new Point(e.getX(), e.getY());
                            	drawEnd = drawStart;
                                repaint();
                                
                            	}
                            	
                                
                                }

                            public void mouseReleased(MouseEvent e)
                                {
                            	
                            	if(currentAction != 1&&currentAction !=5){
                            	
                            	  // Create a shape using the starting x & y
                            	  // and finishing x & y positions
                            	
                            	Shape aShape = null;
                            	
                            	if (currentAction == 2){
                            		 System.out.println(currentAction);
                            		 //create a new line using x y coordinates
                            		aShape = drawLine(drawStart.x, drawStart.y,
                            				e.getX(), e.getY());
                            	} else 
                            	
                            	if (currentAction == 3){
                            		 System.out.println(currentAction);
                            		//create a new ellipse using x y coordinates
                            		aShape = drawEllipse(drawStart.x, drawStart.y,
                            				e.getX(), e.getY());
                            	} else 
                            	
                            	if (currentAction == 4) {
                            		 System.out.println(currentAction);
                            		
                            		// Create a new rectangle using x & y coordinates
                            		
                                    aShape = drawRectangle(drawStart.x, drawStart.y,
                                    		e.getX(), e.getY());
                            	}
                            	
                            	

 
                                  // Add shapes, fills and colors to there ArrayLists
                                  
                                  shapes.add(aShape);
                                  shapeFill.add(fillColor);
                                  shapeStroke.add(strokeColor);
                                  
                                  // Add transparency value to ArrayList
                                  
                                  transPercent.add(transparentVal);
                                  
                                  drawStart = null;
                                  drawEnd = null;
                                  
                                  // repaint the drawing area
                                  
                                  repaint();
                                  
                            	}
                                  
                                }
                            
                            
                            
                            
                            public void mouseClicked(MouseEvent e) {
                            	if(currentAction==7) {
                            		System.out.println("Nice");
                            		do {
                            		drawPoint=new Point(e.getPoint());
                            		images.add(image);
                            		}
                            		while(currentAction!=7);
                            		
                            	}
                            	
                            }
                            
                            
                            
                          } );

                        this.addMouseMotionListener(new MouseMotionAdapter()
                        {
                        	
                          public void mouseDragged(MouseEvent e)
                          {
                        	  
                        	  // If this is a brush
                        	  
                        	  if(currentAction == 1){
                        		  System.out.println(currentAction);
                      			
                      			int x = e.getX();
                      			int y = e.getY();
                      			
                      			Shape aShape = null;
                      			
                      				//parse the value introduced in JTextField to paint the propper Brush
                      				Object W=BrushW.getText();
                    				String pars= W.toString();
                    				int w=Integer.parseInt(pars);
                    				 
                    				Object H=BrushH.getText();
                    				String parsH= H.toString();
                    				int g=Integer.parseInt(parsH);
                      			
                    				aShape = drawBrush(x,y,w,g);
                      			
                      			  shapes.add(aShape);
                                  shapeFill.add(fillColor);
                                  shapeStroke.add(strokeColor);
                                  
                                  // Add the transparency value
                                  
                                  transPercent.add(transparentVal);
                        	  
                                  
                                  
                      		} 
                        	  
                        	  else
                        		 //if eraser is selected
                        		  if(currentAction == 5) {
                        			  System.out.println(currentAction);
                            			
                            			int x = e.getX();
                            			int y = e.getY();
                            			
                            			Shape aShape = null;
                            			
                            		
                            			//parse the value introduced in JTextField to paint the propper Brush
                            			Object W=BrushW.getText();
                        				String pars= W.toString();
                        				int w=Integer.parseInt(pars);
                        				 
                        				Object H=BrushH.getText();
                        				String parsH= H.toString();
                        				int g=Integer.parseInt(parsH);
                          			
                        			
                            			//make the stroke and fill and erase equal so that the eraser will be always white
                            			strokeColor=fillColor=EraseColor;
                            			aShape = drawBrush(x,y,w,g);
                            			
                            			  shapes.add(aShape);
                                        shapeFill.add(fillColor);
                                        shapeStroke.add(strokeColor);
                                        	
                                        // Add the transparency value
                                        
                                        transPercent.add(transparentVal);
                        			  
                        		  }
                    
                        	// Get the final x & y position after the mouse is dragged
                        	  
                        	drawEnd = new Point(e.getX(), e.getY());
                            repaint();
                          }
                        } );
                
                }
                

                public void paint(Graphics g)
                {
                	
                	
                		// Class used to define the shapes to be drawn
                	
                        graphSettings = (Graphics2D)g;
                        graphSettings.setBackground(EraseColor);
                        
                        
                        // Antialiasing cleans up the jagged lines and defines rendering rules
                        
                        graphSettings.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                RenderingHints.VALUE_ANTIALIAS_ON);
                        
                        // Defines the line width of the stroke
                        
                        graphSettings.setStroke(new BasicStroke(4));

                        // Iterators created to cycle through strokes and fills
                        Iterator<Color> strokeCounter = shapeStroke.iterator();
                        Iterator<Color> fillCounter = shapeFill.iterator();
                        
                        // Iterator for transparency
                        
                        Iterator<Float> transCounter = transPercent.iterator();
                        
                        for (Shape s : shapes)
                        {
                        	for(@SuppressWarnings("unused") Image im:images) {
                        	
                        	if(currentAction==7) {
                            	
                            	
                            	do {
                            		graphSettings.drawImage(image, drawPoint.x, drawPoint.y, this);
                            	}
                            	while(currentAction!=7);
                            	
                            	graphSettings.dispose();
                            	
                            	
                            }
                        	}
                        	// Sets the shapes transparency value
                            
                            graphSettings.setComposite(AlphaComposite.getInstance(
                                    AlphaComposite.SRC_OVER, transCounter.next()));
                        	
                        	// Grabs the next stroke from the color arraylist
                        	graphSettings.setPaint(strokeCounter.next());
                        	
                        	graphSettings.draw(s);
                        	
                        	// Grabs the next fill from the color arraylist
                        	graphSettings.setPaint(fillCounter.next());
                        	
                        	graphSettings.fill(s);
                        	
                        	
                        }
                        
                        
                        
                        // Guide shape used for drawing
                        if (drawStart != null && drawEnd != null)
                        {
                        	// Makes the guide shape transparent
                            
                        	
                        	
                            // Makes guide shape gray 
                            
                        	graphSettings.setPaint(Color.BLACK);
                        	
                        	Shape aShape = null;
                        	
                        	if (currentAction == 2){
                        		
                        		// Create a new Line using x & y coordinates
                        		aShape = drawLine(drawStart.x, drawStart.y,
                                		drawEnd.x, drawEnd.y);
                        	} else 
                        	
                        	if (currentAction == 3){
                        		
                        		// Create a new ellipse using x & y coordinates
                        		aShape = drawEllipse(drawStart.x, drawStart.y,
                                		drawEnd.x, drawEnd.y);
                        	} else 
                        	
                        	if (currentAction == 4) {
                        		
                        		// Create a new rectangle using x & y coordinates
                        		
                                aShape = drawRectangle(drawStart.x, drawStart.y,
                                		drawEnd.x, drawEnd.y);
                        	}
                        	
                        	
                                
                                //drawing the shapes
                                graphSettings.draw(aShape);
                        }
                        
                        
                        
                       
                }
                
                
                
                private Rectangle2D.Float drawRectangle(
                        int x1, int y1, int x2, int y2)
                {
                	// Get the top left hand corner for the shape
                	// returns the points closest to 0
                	
                        int x = Math.min(x1, x2);
                        int y = Math.min(y1, y2);
                        
                        // Gets the difference between the coordinates and 
                        
                        int width = Math.abs(x1 - x2);
                        int height = Math.abs(y1 - y2);

                        return new Rectangle2D.Float(
                                x, y, width, height);
                }
                
                
                
                private Ellipse2D.Float drawEllipse(
                        int x1, int y1, int x2, int y2)
                {
                	// Get the top left hand corner for the shape
                	// returns the points closest to 0
                        int x = Math.min(x1, x2);
                        int y = Math.min(y1, y2);
                        
                        // Gets the difference between the coordinates and 
                        int width = Math.abs(x1 - x2);
                        int height = Math.abs(y1 - y2);

                        return new Ellipse2D.Float(
                                x, y, width, height);
                }
                
                private Line2D.Float drawLine(
                        int x1, int y1, int x2, int y2)
                {
                	
                        return new Line2D.Float(
                                x1, y1, x2, y2);
                }
                
                private Ellipse2D.Float drawBrush(
                        int x1, int y1, int brushStrokeWidth, int brushStrokeHeight)
                {
                	
                	return new Ellipse2D.Float(
                            x1, y1, brushStrokeWidth, brushStrokeHeight);
                	
                }
                
                
                
               
                

        }
        
     // Implements ActionListener so it can react to events on components
        
        private class ListenForSlider implements ChangeListener{
        	
        	// Called when the spinner is changed
        	
        	public void stateChanged(ChangeEvent e) {
        	
        		// Check if the source of the event was the button
        	
        		if(e.getSource() == transSlider){
        	
        			// Change the value for the label next to the spinner
        			// Use decimal format to make sure only 2 decimals are ever displayed
        	
        			transLabel.setText("Transparent: " + dec.format(transSlider.getValue() * .01) );
        			
        			// Set the value for transparency for every shape drawn after
        			
        			transparentVal = (float) (transSlider.getValue() * .01);
        			
        		}
        	
        	}
        	
        }
        
        
}


class test{
	
	public static void main(String[] args) throws IOException {
		PaintApp ob=new PaintApp();
	}
}